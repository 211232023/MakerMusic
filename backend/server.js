require('dotenv').config();
const express = require('express');
const cors = require('cors');
const userRoutes = require('./src/routes/userRoutes');
const taskRoutes = require('./src/routes/taskRoutes');
const adminRoutes = require('./src/routes/adminRoutes');
const { testConnection } = require('./src/config/db'); 

const app = express();
const PORT = process.env.PORT || 3000;

// Middlewares
app.use(cors());
app.use(express.json());

// Rotas
app.use('/api/users', userRoutes);
app.use('/api/tasks', taskRoutes);
app.use('/api/admin', adminRoutes);

// Nova funÃ§Ã£o assÃ­ncrona para iniciar o servidor
const startServer = async () => {
  try {
    // 1. Primeiro, tenta ligar-se Ã  base de dados
    await testConnection();

    // 2. Se a ligaÃ§Ã£o for bem-sucedida, e sÃ³ entÃ£o, inicia o servidor Express
    app.listen(PORT, () => {
      console.log(`ğŸš€ Servidor pronto e a correr na porta ${PORT}`);
    });
  } catch (error) {
    // Se a ligaÃ§Ã£o Ã  BD falhar, o servidor nÃ£o inicia
    console.error('ğŸš« Falha ao iniciar o servidor. Verifique a ligaÃ§Ã£o com a base de dados.');
    process.exit(1); // Encerra o processo com um cÃ³digo de erro
  }
};

// Chama a funÃ§Ã£o para iniciar tudo
startServer();